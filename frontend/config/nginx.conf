# Usa automaticamente tutti i core disponibili
worker_processes auto;

# Scrive i log degli errori su stdout con livello "warn"
error_log /dev/stdout warn;

# Imposta il file PID in una directory temporanea (utile in ambienti containerizzati)
pid /tmp/nginx.pid;

events {
    # Numero massimo di connessioni simultanee per ogni worker
    worker_connections 1024;
}

http {
    # Include la definizione dei tipi MIME (es. .html, .css, .js ecc.)
    include /etc/nginx/mime.types;

    # Tipo MIME di default se non specificato
    default_type application/octet-stream;

    # Scrive i log degli accessi su stdout (utile in Docker)
    access_log /dev/stdout;

    # Disabilita l’uso diretto del file system (sendfile), utile per overlay FS nei container
    sendfile off;

    # Ottimizza l'invio iniziale di pacchetti (TCP)
    tcp_nopush on;

    # Riduce la latenza TCP
    tcp_nodelay on;

    # Timeout per connessioni HTTP keep-alive
    keepalive_timeout 65;

    # Abilita la compressione Gzip per risparmiare banda
    gzip on;

    # Specifica che Gzip può variare in base all'header `Accept-Encoding`
    gzip_vary on;

    # Comprimi solo file superiori a 1024 byte
    gzip_min_length 1024;

    # Tipi MIME da comprimere con Gzip
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Imposta percorsi temporanei in /tmp per gestire file e buffering (importante nei container)
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path /tmp/proxy_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;

    server {
        # Nginx ascolta sulla porta 80
        listen 80;

        # Nome del server (non rilevante in questo caso, usato per virtual host)
        server_name localhost;

        # Percorso della root del sito web (dove sono i file statici)
        root /usr/share/nginx/html;

        # File di default da servire in una directory
        index index.html index.htm;

        # Header di sicurezza HTTP per limitare alcune vulnerabilità
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # Route principale: prova a servire il file richiesto, se non esiste mostra index.html
        location / {
            try_files $uri $uri/ /index.html;

            # Per i file HTML imposta headers per evitare cache (utile in app SPA)
            location ~* \.html$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
        }

        # Gestione dei file .js
        location ~* \.js$ {
            # Forza il Content-Type (anche se spesso è già corretto)
            add_header Content-Type "application/javascript; charset=utf-8";

            # Abilita cache aggressiva per i JS con hash nei nomi (vite lo fa)
            add_header Cache-Control "public, max-age=31536000, immutable";

            # Evita interpretazioni errate del MIME
            add_header X-Content-Type-Options nosniff;
        }

        # Gestione degli asset statici (css, immagini, font, svg...)
        location ~* \.(css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            # Cache a lungo termine
            expires 1y;

            # Header per dire ai browser di non cambiare mai questi asset
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }

        # Qualsiasi 404 viene reindirizzato a index.html (tipico delle SPA)
        error_page 404 /index.html;
    }
}
